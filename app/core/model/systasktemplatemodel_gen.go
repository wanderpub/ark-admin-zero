// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysTaskTemplateFieldNames          = builder.RawFieldNames(&SysTaskTemplate{})
	sysTaskTemplateRows                = strings.Join(sysTaskTemplateFieldNames, ",")
	sysTaskTemplateRowsExpectAutoSet   = strings.Join(stringx.Remove(sysTaskTemplateFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	sysTaskTemplateRowsWithPlaceHolder = strings.Join(stringx.Remove(sysTaskTemplateFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheArkAdminSysTaskTemplateIdPrefix = "cache:arkAdmin:sysTaskTemplate:id:"
)

type (
	sysTaskTemplateModel interface {
		Insert(ctx context.Context, data *SysTaskTemplate) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysTaskTemplate, error)
		Update(ctx context.Context, data *SysTaskTemplate) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysTaskTemplateModel struct {
		sqlc.CachedConn
		table string
	}

	SysTaskTemplate struct {
		Id                  int64  `db:"id"`
		Name                string `db:"name"`                 // 标题
		SendAccount         int64  `db:"send_account"`         // 发送账号 一个渠道下可存在多个账号
		Config              string `db:"config"`               // 配置参数json
		DeduplicationConfig string `db:"deduplication_config"` // 限流配置
		AuditStatus         int64  `db:"audit_status"`         // 当前消息审核状态： 10.待审核 20.审核成功 30.被拒绝
		FlowId              string `db:"flow_id"`              // 工单ID
		MsgStatus           int64  `db:"msg_status"`           // 当前消息状态：10.新建 20.停用 30.启用 40.等待发送 50.发送中 60.发送成功 70.发送失败
		CronTaskId          int64  `db:"cron_task_id"`         // 定时任务Id (xxl-job-admin返回)
		CronCrowdPath       string `db:"cron_crowd_path"`      // 定时发送人群的文件路径
		ExpectPushTime      string `db:"expect_push_time"`     // 期望发送时间：0:立即发送 定时任务以及周期任务:cron表达式
		IdType              int64  `db:"id_type"`              // 消息的发送ID类型：10. userId 20.did 30.手机号 40.openId 50.email 60.企业微信userId
		SendChannel         int64  `db:"send_channel"`         // 消息发送渠道：10.IM 20.Push 30.短信 40.Email 50.公众号 60.小程序 70.企业微信
		TemplateType        int64  `db:"template_type"`        // 10.运营类 20.技术类接口调用
		MsgType             int64  `db:"msg_type"`             // 10.通知类消息 20.营销类消息 30.验证码类消息
		ShieldType          int64  `db:"shield_type"`          // 10.夜间不屏蔽 20.夜间屏蔽 30.夜间屏蔽(次日早上9点发送)
		MsgContent          string `db:"msg_content"`          // 消息内容 占位符用{$var}表示
		Creator             string `db:"creator"`              // 创建者
		Updator             string `db:"updator"`              // 更新者
		Auditor             string `db:"auditor"`              // 审核人
		Team                string `db:"team"`                 // 业务方团队
		Proposer            string `db:"proposer"`             // 业务方
		IsDeleted           int64  `db:"is_deleted"`           // 是否删除：0.不删除 1.删除
		Created             int64  `db:"created"`              // 创建时间
		Updated             int64  `db:"updated"`              // 更新时间
	}
)

func newSysTaskTemplateModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysTaskTemplateModel {
	return &defaultSysTaskTemplateModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_task_template`",
	}
}

func (m *defaultSysTaskTemplateModel) Delete(ctx context.Context, id int64) error {
	arkAdminSysTaskTemplateIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysTaskTemplateIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, arkAdminSysTaskTemplateIdKey)
	return err
}

func (m *defaultSysTaskTemplateModel) FindOne(ctx context.Context, id int64) (*SysTaskTemplate, error) {
	arkAdminSysTaskTemplateIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysTaskTemplateIdPrefix, id)
	var resp SysTaskTemplate
	err := m.QueryRowCtx(ctx, &resp, arkAdminSysTaskTemplateIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysTaskTemplateRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysTaskTemplateModel) Insert(ctx context.Context, data *SysTaskTemplate) (sql.Result, error) {
	arkAdminSysTaskTemplateIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysTaskTemplateIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysTaskTemplateRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.SendAccount, data.Config, data.DeduplicationConfig, data.AuditStatus, data.FlowId, data.MsgStatus, data.CronTaskId, data.CronCrowdPath, data.ExpectPushTime, data.IdType, data.SendChannel, data.TemplateType, data.MsgType, data.ShieldType, data.MsgContent, data.Creator, data.Updator, data.Auditor, data.Team, data.Proposer, data.IsDeleted, data.Created, data.Updated)
	}, arkAdminSysTaskTemplateIdKey)
	return ret, err
}

func (m *defaultSysTaskTemplateModel) Update(ctx context.Context, data *SysTaskTemplate) error {
	arkAdminSysTaskTemplateIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysTaskTemplateIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysTaskTemplateRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.SendAccount, data.Config, data.DeduplicationConfig, data.AuditStatus, data.FlowId, data.MsgStatus, data.CronTaskId, data.CronCrowdPath, data.ExpectPushTime, data.IdType, data.SendChannel, data.TemplateType, data.MsgType, data.ShieldType, data.MsgContent, data.Creator, data.Updator, data.Auditor, data.Team, data.Proposer, data.IsDeleted, data.Created, data.Updated, data.Id)
	}, arkAdminSysTaskTemplateIdKey)
	return err
}

func (m *defaultSysTaskTemplateModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheArkAdminSysTaskTemplateIdPrefix, primary)
}

func (m *defaultSysTaskTemplateModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysTaskTemplateRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysTaskTemplateModel) tableName() string {
	return m.table
}
