// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysTaskLogFieldNames          = builder.RawFieldNames(&SysTaskLog{})
	sysTaskLogRows                = strings.Join(sysTaskLogFieldNames, ",")
	sysTaskLogRowsExpectAutoSet   = strings.Join(stringx.Remove(sysTaskLogFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	sysTaskLogRowsWithPlaceHolder = strings.Join(stringx.Remove(sysTaskLogFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheArkAdminSysTaskLogIdPrefix = "cache:arkAdmin:sysTaskLog:id:"
)

type (
	sysTaskLogModel interface {
		Insert(ctx context.Context, data *SysTaskLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysTaskLog, error)
		Update(ctx context.Context, data *SysTaskLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysTaskLogModel struct {
		sqlc.CachedConn
		table string
	}

	SysTaskLog struct {
		Id         int64 `db:"id"`
		CreateTime int64 `db:"create_time"`
	}
)

func newSysTaskLogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysTaskLogModel {
	return &defaultSysTaskLogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_task_log`",
	}
}

func (m *defaultSysTaskLogModel) Delete(ctx context.Context, id int64) error {
	arkAdminSysTaskLogIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysTaskLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, arkAdminSysTaskLogIdKey)
	return err
}

func (m *defaultSysTaskLogModel) FindOne(ctx context.Context, id int64) (*SysTaskLog, error) {
	arkAdminSysTaskLogIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysTaskLogIdPrefix, id)
	var resp SysTaskLog
	err := m.QueryRowCtx(ctx, &resp, arkAdminSysTaskLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysTaskLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysTaskLogModel) Insert(ctx context.Context, data *SysTaskLog) (sql.Result, error) {
	arkAdminSysTaskLogIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysTaskLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ()", m.table, sysTaskLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query)
	}, arkAdminSysTaskLogIdKey)
	return ret, err
}

func (m *defaultSysTaskLogModel) Update(ctx context.Context, data *SysTaskLog) error {
	arkAdminSysTaskLogIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysTaskLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysTaskLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id)
	}, arkAdminSysTaskLogIdKey)
	return err
}

func (m *defaultSysTaskLogModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheArkAdminSysTaskLogIdPrefix, primary)
}

func (m *defaultSysTaskLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysTaskLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysTaskLogModel) tableName() string {
	return m.table
}
